
<style>
  path {
    stroke: steelblue;
    stroke-width: 1;
    fill: none;
  }

  .axis {
    shape-rendering: crispEdges;
  }

  .x.axis line {
    stroke: lightgrey;
  }

  .x.axis .minor {
    stroke-opacity: .5;
  }

  .x.axis path {
    display: none;
  }

  .y.axis line, .y.axis path {
    fill: none;
    stroke: #000;
  }
</style>

    <div id="graph" class="aGraph" style="margin-left: 125px;position:absolute;top:0px;left:0; float:left;"></div>
<div style="margin-top: 300px">
  <table data-toggle="table" class="table table-hover">
    <thead>
      <tr>
        <th data-field="id" data-sortable="true">Id</th>
        <th data-field="type" data-sortable="true">Type</th>
        <th data-field="stock" data-sortable="true">Stock</th>
        <th data-field="price" data-sortable="true">Price</th>
        <th data-field="shares" data-sortable="true">Shares</th>
        <th data-field="cash">Cash</th>
      </tr>
    </thead>
    <tbody>


      <% res.each do |x| %>
        <% if x.getType() == "BUY" %>
          <tr class="success">
          <% else %>
            <% if x.getType() == "SELL" %>
              <tr class="info">
              <% else %> 
                <tr>
                <% end %>
              <% end %>
              <td><%= x.getId() %></td>
              <td><%= x.getType() %></td>
              <td><%= x.getStock() %></td>
              <td><%= x.getPrice() %></td>
              <td><%= x.getShares() %></td>
              <td><%= x.getCash() %></td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>

    <script src="http://d3js.org/d3.v3.min.js"></script>

    <script>
      /* implementation heavily influenced by http://bl.ocks.org/1166403 */

      // define dimensions of graph
      var m = [80, 80, 80, 80]; // margins
      var w = 1000 - m[1] - m[3]; // width
      var h = 400 - m[0] - m[2]; // height

      // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
      var data = [];
      <% res.each do |x| %>
        <% if x.getCash() != "ou" %>
          data.push(parseFloat(<%= x.getCash() %>));
        <% end %>
      <% end %>
      console.log(data);

      // X scale will fit all values from data[] within pixels 0-w
      var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
      // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
      var y = d3.scale.linear().domain([0, 1800]).range([h, 0]);
      // automatically determining max range can work something like this
      // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);

      // create a line function that can convert data[] into x and y points
      var line = d3.svg.line()
      // assign the X function to plot our line as we wish
      .x(function(d,i) { 
        // verbose logging to show what's actually being done
        console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
        // return the X coordinate where we want to plot this datapoint
        return x(i); 
      })
      .y(function(d) { 
        // verbose logging to show what's actually being done
        console.log('Plotting Y value for data point: ' + d + ' to be at: ' + Math.abs(y(d)) + " using our yScale.");
        // return the Y coordinate where we want to plot this datapoint
        return Math.abs(y(d)); 
      })

      // Add an SVG element with the desired dimensions and margin.
      var graph = d3.select("#graph").append("svg:svg")
      .attr("width", w + m[1] + m[3])
      .attr("height", h + m[0] + m[2])
      .append("svg:g")
      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      // create yAxis
      var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
      // Add the x-axis.
      graph.append("svg:g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + h + ")")
      .call(xAxis);


      // create left yAxis
      var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
      // Add the y-axis to the left
      graph.append("svg:g")
      .attr("class", "y axis")
      .attr("transform", "translate(-25,0)")
      .call(yAxisLeft);

      // Add the line by appending an svg:path element with the data line we created above
      // do this AFTER the axes above so that the line is above the tick-lines
      graph.append("svg:path").attr("d", line(data));


    </script>
